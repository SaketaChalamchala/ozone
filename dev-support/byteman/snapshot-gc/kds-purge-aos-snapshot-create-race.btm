# Step 0.1: Control AbstractKeyDeletingService.shouldRun() to return false until signaled
RULE Control shouldRun method to return false
CLASS org.apache.hadoop.ozone.om.service.AbstractKeyDeletingService
METHOD shouldRun
AT ENTRY
IF !flagged("keyDeleted")
DO
    System.out.println("[" + java.time.LocalDateTime.now() + "] BYTEMAN: " +
    "STEP 0.1 - AbstractKeyDeletingService.shouldRun() forced to return false");
    return false
ENDRULE

# Step 0.2: Allow shouldRun to work normally after signal
RULE Enable shouldRun functionality
CLASS org.apache.hadoop.ozone.om.service.AbstractKeyDeletingService
METHOD shouldRun
AT ENTRY
IF flagged("keyDeleted")
DO
    System.out.println("[" + java.time.LocalDateTime.now() + "] BYTEMAN: " +
    "STEP 0.2 - AbstractKeyDeletingService.shouldRun() allowed to proceed normally");
ENDRULE

# Step 1: Signal when key is deleted to allow KDS to run
RULE Signal key deleted
CLASS org.apache.hadoop.ozone.om.response.key.OMKeyDeleteResponseWithFSO
METHOD addToDBBatch
AT EXIT
IF true
DO
    System.out.println("[" + java.time.LocalDateTime.now() + "] BYTEMAN: " +
    "STEP 1 - Detected key delete");
    flag("keyDeleted");
ENDRULE

# Step 2: Pause KeyDeletingService before submitting purge requests
RULE Pause service before purge request submission
CLASS org.apache.hadoop.ozone.om.service.KeyDeletingService
METHOD submitPurgeRequest
AT ENTRY
IF true
DO
    System.out.println("[" + java.time.LocalDateTime.now() + "] BYTEMAN: " +
    "STEP 2 - Pausing KeyDeletingService before submitPurgeRequest");
    # Wait for snapshot creation with timeout to simulate race condition
    waitFor("snapshotCreated");
    System.out.println("[" + java.time.LocalDateTime.now() + "] BYTEMAN: " +
    "STEP 3 - Snapshot created, resuming KeyDeletingService.submitPurgeRequest");
ENDRULE

# Step 3: Detect snapshot creation when committed and flushed from double buffer
RULE Detect snapshot creation after commit and flush
CLASS org.apache.hadoop.ozone.om.request.snapshot.OMSnapshotCreateRequest
METHOD validateAndUpdateCache
AT EXIT
IF true
DO
    System.out.println("[" + java.time.LocalDateTime.now() + "] BYTEMAN: " +
    "STEP 3 - Snapshot creation detected");
    # Wait for snapshot creation with timeout to simulate race condition
    signalWake("snapshotCreated");
ENDRULE

# Step 4: Log completion of OMKeyPurgeRequest processing
RULE Log OMKeyPurgeRequest completion
CLASS org.apache.hadoop.ozone.om.request.key.OMKeyPurgeRequest
METHOD validateAndUpdateCache
AT EXIT
IF true
DO
    System.out.println("[" + java.time.LocalDateTime.now() + "] BYTEMAN: " +
    "STEP 4 - OMKeyPurgeRequest.validateAndUpdateCache completed");
    # Check if the response indicates failure
    System.out.println("[" + java.time.LocalDateTime.now() + "] BYTEMAN: " +
    "STEP 4.1 - OMKeyPurgeRequest Success = " + $!.getOMResponse().getSuccess());
ENDRULE
